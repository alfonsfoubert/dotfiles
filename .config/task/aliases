#!/bin/bash

# Taskwarrior shortcuts and helpers
alias t=task

task() {
    if [[ $1 == "open" ]]; then
      # Call the custom task-open function with the second argument
      task-open "$2"
    elif [[ $1 == "note" ]] then
      # Call the custom note-open function with the second argument
      note-open "$2"
    else
      # Call the original Taskwarrior command
      command task "$@"
    fi
}

function statistics() {
  while true; do
    # Clear the screen for each iteration to keep the display clean
    clear

    # Fetch and display Taskwarrior statistics
    echo "INBOX\tPENDING\tWAITING\tDELEGATED"
    echo "`task +in +PENDING -COMPLETED -DELETED count`\t`task +PENDING -BLOCKED -COMPLETED -DELETED -sdm -waiting delegated: count`\t`task +waiting -COMPLETED -DELETED count`\t`task +PENDING delegated.any: count`"

    # Wait for a specified duration before repeating the loop
    # For example, sleep for 60 seconds (1 minute)
    sleep 60
  done
}

function top3() {
  while true; do
    # Clear the screen for each iteration to keep the display clean
    clear

    # Fetch and display Taskwarrior tasks
    task limit=3 sort=urgency

    # Wait for a specified duration before repeating the loop
    # For example, sleep for 60 seconds (1 minute)
    sleep 60
  done
}

# Helper to get the readdle-spark link for the currently selected email
# (On macOS, I use Spark as my email client)
function get-spark() {
  case $1 in
    title)
      osascript - << END
tell application "Spark"
	if HasSelectedMessage then
		set theResult to GetSelectedMessageTitle
		return theResult
	end if
end tell
END
      ;;
    *)
      osascript - << END
tell application "Spark"
	if HasSelectedMessage then
		set theResult to GetSelectedMessageBacklink
		return theResult
	end if
end tell
END
      ;;
  esac
}

# Inbox an item (idea, task, ...)
# Withot an argument, lists the "inbox"
function task-in() {
  if [[ $# -eq 0 ]]; then
    task 'in'
  else
    task add +in $@
  fi
}

# Shorthand for inboxing
alias in=task-in

# Inbox an email from Spark with the subject and an optional prefix as the 
# description.
# A handle to that email in Spark is saved using the 'uri' UDA, so the mail
# can be quickly accessed using task-open (see below).
function inspark() {
  if [[ $# -gt 0 ]]; then
    prep="$@: "
  fi
  in uri:"`get-spark uri`" "$prep`get-spark title`"
}

# Read and Review
webpage_title (){
    wget -qO- "$*" | hxnormalize -x | hxselect -s '\n' -c  'title' 2>/dev/null
}

read_and_review (){
    link="$1"
    title=$(webpage_title $link)
    descr="\"Read and review: $title\""
    task add +rnr uri:"$link" "$descr"
}

alias rnr=read_and_review

# Move a task to the "waiting" queue (not related to "waiting tasks" - I use
# those separately). Optionally, annotate.
# Without an argument, lists the "waiting" queue
function waiting() {
  if [[ $# -eq 0 ]]; then
    task waitingfor
  else
    filter="$1"
    shift
    task "$filter" stop
    task "$filter" ann -in -next +waiting $@
  fi
}

# Add a task to the "next" queue. Optionally, annotate.
# Without an argument, lists the "next" queue
function next() {
  if [[ $# -eq 0 ]]; then
    task +next
  else
    filter="$1"
    shift
    task "$filter" ann -in -waiting +next $@
  fi
}

# Mark a task as due today (I use the due date to control the "today" queue)
# Without an argument, list tasks due today
function today() {
  if [[ $# -eq 0 ]]; then
    task today
  else
    filter="$1"
    shift
    task "$filter" ann due:eod -in -waiting +next $@
  fi
}

# Mark a task as someday/maybe
# Without an argument, list tasks someday
function someday() {
  if [[ $# -eq 0 ]]; then
    task sdm
  else
    filter="$1"
    shift
    task "$filter" ann -in -waiting -next +sdm $@
  fi
}

# Assign the current directory as a project for the task 
# Without an argument, prints the current project
function project() {
  if [[ $# -eq 0 ]]; then
    return
  fi
  pr='basename "$(pwd)"'
  filter="$1"
  shift
  task "$filter" mod pro:"`basename "$(pwd)"`"
}

# Inbox an item, but hide it until the given deadline
# Based on GTD tickling, which I'm only exploring.
# Example: 
# $ tickle wednesday Plan weekend trip
tickle () {
    deadline=$1
    shift
    in +tickle wait:$deadline $@
}
alias tick=tickle

# Shorthand for inboxing an item for consideration tomorrow
alias think='tickle +1d'

# Defer considering a task by adjusting its wait date
# This also moves it back to the inbox.
#
# Optionally, annotate by the given text
# Example: 
# $ defer 42 +1d Need to think this over
function defer() {
  filter=$1
  deadline=$2
  shift 2
  task "$filter" ann -next -waiting +in wait:"$deadline" $@
}

# Set a task's due date
#
# Optionally, annotate by the given text
# Example: 
# $ due 42 wednesday
function due() {
  filter=$1
  deadline=$2
  shift 2
  task "$filter" ann due:"$deadline" $@
}


# Taskwarrior's date synonyms are somewhat limitted. E.g. marking a task due
# tomorrow, will make it due at midnight, meaninng it will be overdue for the 
# whole day. This helper fixes this for me.
# Example: 
# $ task add Buy milk due:`eod wednesday 2 weeks`
function eod() {
  # if on macOS, the GNU date command is gdate
  if command -v gdate &> /dev/null; then
    datecmd=gdate
  else
    datecmd=date
  fi

  if [[ $# -eq 0 ]]; then
    date=today
  else
    date="$@"
  fi

  $datecmd -d "$date 23:59:59" -Iseconds
}

# I use a 'uri' UDA to store a default link or file path associated with a task
# This will use Mac's open to open that URI with the default app.
# I have a Taskwarrior alias called open, so this can be called as 
# `task open 42` or even `t open 42`
function task-open() {
  open `task _get $1.uri`
}

# I use neovim as my note taking application
# Thiw will open the proper folder with the notes
function note-open() {
  # Get the variables I'll need
  notes_dir="$HOME/Notes/"
  note_id=`task _get $1.uuid | awk -F "-" '{print $5}'`
  prj=`task _get $1.project`
  word_count=$(echo "$prj" | tr -s ' ' '\n' | wc -l)
  if [ -z "$prj" ]; then
    # No project specified
    proj_dir="0.Inbox/"
  elif [ "$word_count" -gt 1 ]; then
    # Projects have more than one word
    proj_dir="1.Projects/"
  else
    # It's an area (Areas have only one word)
    proj_dir="2.Areas/"
  fi
  #
  # Create directory if it doesn't exist
  target_dir="$notes_dir$proj_dir$prj/"
  if [ ! -d "$target_dir" ]; then
    mkdir -p "$target_dir"
  fi

  # Open the editor
  nvim "$target_dir$note_id.md"
}

# Task annotate
function tan() {
  filter="$1"
  shift
  task $filter ann $@
}

# Task delegation
function delegate() {
  if [[ $# -eq 0 ]]; then
    task delegated
  else
    filter=$1
    person=$2
    shift 2
    task "$filter" ann -in -next delegated:"$person" $@
  fi
}
alias delegated=delegate
